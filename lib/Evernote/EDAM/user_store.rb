#
# Autogenerated by Thrift Compiler (0.5.0-en-exported)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'user_store_types'

module Evernote
  module EDAM
    module UserStore
      module UserStore
        class Client
          include ::Thrift::Client

          def checkVersion(clientName, edamVersionMajor, edamVersionMinor)
            send_checkVersion(clientName, edamVersionMajor, edamVersionMinor)
            return recv_checkVersion()
          end

          def send_checkVersion(clientName, edamVersionMajor, edamVersionMinor)
            send_message('checkVersion', CheckVersion_args, :clientName => clientName, :edamVersionMajor => edamVersionMajor, :edamVersionMinor => edamVersionMinor)
          end

          def recv_checkVersion()
            result = receive_message(CheckVersion_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'checkVersion failed: unknown result')
          end

          def getBootstrapInfo(locale)
            send_getBootstrapInfo(locale)
            return recv_getBootstrapInfo()
          end

          def send_getBootstrapInfo(locale)
            send_message('getBootstrapInfo', GetBootstrapInfo_args, :locale => locale)
          end

          def recv_getBootstrapInfo()
            result = receive_message(GetBootstrapInfo_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBootstrapInfo failed: unknown result')
          end

          def authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor)
            send_authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor)
            return recv_authenticateLongSession()
          end

          def send_authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor)
            send_message('authenticateLongSession', AuthenticateLongSession_args, :username => username, :password => password, :consumerKey => consumerKey, :consumerSecret => consumerSecret, :deviceIdentifier => deviceIdentifier, :deviceDescription => deviceDescription, :supportsTwoFactor => supportsTwoFactor)
          end

          def recv_authenticateLongSession()
            result = receive_message(AuthenticateLongSession_result)
            return result.success unless result.success.nil?
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'authenticateLongSession failed: unknown result')
          end

          def completeTwoFactorAuthentication(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription)
            send_completeTwoFactorAuthentication(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription)
            return recv_completeTwoFactorAuthentication()
          end

          def send_completeTwoFactorAuthentication(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription)
            send_message('completeTwoFactorAuthentication', CompleteTwoFactorAuthentication_args, :authenticationToken => authenticationToken, :oneTimeCode => oneTimeCode, :deviceIdentifier => deviceIdentifier, :deviceDescription => deviceDescription)
          end

          def recv_completeTwoFactorAuthentication()
            result = receive_message(CompleteTwoFactorAuthentication_result)
            return result.success unless result.success.nil?
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'completeTwoFactorAuthentication failed: unknown result')
          end

          def revokeLongSession(authenticationToken)
            send_revokeLongSession(authenticationToken)
            recv_revokeLongSession()
          end

          def send_revokeLongSession(authenticationToken)
            send_message('revokeLongSession', RevokeLongSession_args, :authenticationToken => authenticationToken)
          end

          def recv_revokeLongSession()
            result = receive_message(RevokeLongSession_result)
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            return
          end

          def authenticateToBusiness(authenticationToken)
            send_authenticateToBusiness(authenticationToken)
            return recv_authenticateToBusiness()
          end

          def send_authenticateToBusiness(authenticationToken)
            send_message('authenticateToBusiness', AuthenticateToBusiness_args, :authenticationToken => authenticationToken)
          end

          def recv_authenticateToBusiness()
            result = receive_message(AuthenticateToBusiness_result)
            return result.success unless result.success.nil?
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'authenticateToBusiness failed: unknown result')
          end

          def getUser(authenticationToken)
            send_getUser(authenticationToken)
            return recv_getUser()
          end

          def send_getUser(authenticationToken)
            send_message('getUser', GetUser_args, :authenticationToken => authenticationToken)
          end

          def recv_getUser()
            result = receive_message(GetUser_result)
            return result.success unless result.success.nil?
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUser failed: unknown result')
          end

          def getPublicUserInfo(username)
            send_getPublicUserInfo(username)
            return recv_getPublicUserInfo()
          end

          def send_getPublicUserInfo(username)
            send_message('getPublicUserInfo', GetPublicUserInfo_args, :username => username)
          end

          def recv_getPublicUserInfo()
            result = receive_message(GetPublicUserInfo_result)
            return result.success unless result.success.nil?
            raise result.notFoundException unless result.notFoundException.nil?
            raise result.systemException unless result.systemException.nil?
            raise result.userException unless result.userException.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPublicUserInfo failed: unknown result')
          end

          def getPremiumInfo(authenticationToken)
            send_getPremiumInfo(authenticationToken)
            return recv_getPremiumInfo()
          end

          def send_getPremiumInfo(authenticationToken)
            send_message('getPremiumInfo', GetPremiumInfo_args, :authenticationToken => authenticationToken)
          end

          def recv_getPremiumInfo()
            result = receive_message(GetPremiumInfo_result)
            return result.success unless result.success.nil?
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPremiumInfo failed: unknown result')
          end

          def getSubscriptionInfo(authenticationToken)
            send_getSubscriptionInfo(authenticationToken)
            return recv_getSubscriptionInfo()
          end

          def send_getSubscriptionInfo(authenticationToken)
            send_message('getSubscriptionInfo', GetSubscriptionInfo_args, :authenticationToken => authenticationToken)
          end

          def recv_getSubscriptionInfo()
            result = receive_message(GetSubscriptionInfo_result)
            return result.success unless result.success.nil?
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSubscriptionInfo failed: unknown result')
          end

          def getUserUrls(authenticationToken)
            send_getUserUrls(authenticationToken)
            return recv_getUserUrls()
          end

          def send_getUserUrls(authenticationToken)
            send_message('getUserUrls', GetUserUrls_args, :authenticationToken => authenticationToken)
          end

          def recv_getUserUrls()
            result = receive_message(GetUserUrls_result)
            return result.success unless result.success.nil?
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserUrls failed: unknown result')
          end

          def inviteToBusiness(authenticationToken, emailAddress)
            send_inviteToBusiness(authenticationToken, emailAddress)
            recv_inviteToBusiness()
          end

          def send_inviteToBusiness(authenticationToken, emailAddress)
            send_message('inviteToBusiness', InviteToBusiness_args, :authenticationToken => authenticationToken, :emailAddress => emailAddress)
          end

          def recv_inviteToBusiness()
            result = receive_message(InviteToBusiness_result)
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            return
          end

          def removeFromBusiness(authenticationToken, emailAddress)
            send_removeFromBusiness(authenticationToken, emailAddress)
            recv_removeFromBusiness()
          end

          def send_removeFromBusiness(authenticationToken, emailAddress)
            send_message('removeFromBusiness', RemoveFromBusiness_args, :authenticationToken => authenticationToken, :emailAddress => emailAddress)
          end

          def recv_removeFromBusiness()
            result = receive_message(RemoveFromBusiness_result)
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            raise result.notFoundException unless result.notFoundException.nil?
            return
          end

          def updateBusinessUserIdentifier(authenticationToken, oldEmailAddress, newEmailAddress)
            send_updateBusinessUserIdentifier(authenticationToken, oldEmailAddress, newEmailAddress)
            recv_updateBusinessUserIdentifier()
          end

          def send_updateBusinessUserIdentifier(authenticationToken, oldEmailAddress, newEmailAddress)
            send_message('updateBusinessUserIdentifier', UpdateBusinessUserIdentifier_args, :authenticationToken => authenticationToken, :oldEmailAddress => oldEmailAddress, :newEmailAddress => newEmailAddress)
          end

          def recv_updateBusinessUserIdentifier()
            result = receive_message(UpdateBusinessUserIdentifier_result)
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            raise result.notFoundException unless result.notFoundException.nil?
            return
          end

          def listBusinessUsers(authenticationToken)
            send_listBusinessUsers(authenticationToken)
            return recv_listBusinessUsers()
          end

          def send_listBusinessUsers(authenticationToken)
            send_message('listBusinessUsers', ListBusinessUsers_args, :authenticationToken => authenticationToken)
          end

          def recv_listBusinessUsers()
            result = receive_message(ListBusinessUsers_result)
            return result.success unless result.success.nil?
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'listBusinessUsers failed: unknown result')
          end

          def listBusinessInvitations(authenticationToken, includeRequestedInvitations)
            send_listBusinessInvitations(authenticationToken, includeRequestedInvitations)
            return recv_listBusinessInvitations()
          end

          def send_listBusinessInvitations(authenticationToken, includeRequestedInvitations)
            send_message('listBusinessInvitations', ListBusinessInvitations_args, :authenticationToken => authenticationToken, :includeRequestedInvitations => includeRequestedInvitations)
          end

          def recv_listBusinessInvitations()
            result = receive_message(ListBusinessInvitations_result)
            return result.success unless result.success.nil?
            raise result.userException unless result.userException.nil?
            raise result.systemException unless result.systemException.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'listBusinessInvitations failed: unknown result')
          end

          def getAccountLimits(serviceLevel)
            send_getAccountLimits(serviceLevel)
            return recv_getAccountLimits()
          end

          def send_getAccountLimits(serviceLevel)
            send_message('getAccountLimits', GetAccountLimits_args, :serviceLevel => serviceLevel)
          end

          def recv_getAccountLimits()
            result = receive_message(GetAccountLimits_result)
            return result.success unless result.success.nil?
            raise result.userException unless result.userException.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAccountLimits failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_checkVersion(seqid, iprot, oprot)
            args = read_args(iprot, CheckVersion_args)
            result = CheckVersion_result.new()
            result.success = @handler.checkVersion(args.clientName, args.edamVersionMajor, args.edamVersionMinor)
            write_result(result, oprot, 'checkVersion', seqid)
          end

          def process_getBootstrapInfo(seqid, iprot, oprot)
            args = read_args(iprot, GetBootstrapInfo_args)
            result = GetBootstrapInfo_result.new()
            result.success = @handler.getBootstrapInfo(args.locale)
            write_result(result, oprot, 'getBootstrapInfo', seqid)
          end

          def process_authenticateLongSession(seqid, iprot, oprot)
            args = read_args(iprot, AuthenticateLongSession_args)
            result = AuthenticateLongSession_result.new()
            begin
              result.success = @handler.authenticateLongSession(args.username, args.password, args.consumerKey, args.consumerSecret, args.deviceIdentifier, args.deviceDescription, args.supportsTwoFactor)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            end
            write_result(result, oprot, 'authenticateLongSession', seqid)
          end

          def process_completeTwoFactorAuthentication(seqid, iprot, oprot)
            args = read_args(iprot, CompleteTwoFactorAuthentication_args)
            result = CompleteTwoFactorAuthentication_result.new()
            begin
              result.success = @handler.completeTwoFactorAuthentication(args.authenticationToken, args.oneTimeCode, args.deviceIdentifier, args.deviceDescription)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            end
            write_result(result, oprot, 'completeTwoFactorAuthentication', seqid)
          end

          def process_revokeLongSession(seqid, iprot, oprot)
            args = read_args(iprot, RevokeLongSession_args)
            result = RevokeLongSession_result.new()
            begin
              @handler.revokeLongSession(args.authenticationToken)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            end
            write_result(result, oprot, 'revokeLongSession', seqid)
          end

          def process_authenticateToBusiness(seqid, iprot, oprot)
            args = read_args(iprot, AuthenticateToBusiness_args)
            result = AuthenticateToBusiness_result.new()
            begin
              result.success = @handler.authenticateToBusiness(args.authenticationToken)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            end
            write_result(result, oprot, 'authenticateToBusiness', seqid)
          end

          def process_getUser(seqid, iprot, oprot)
            args = read_args(iprot, GetUser_args)
            result = GetUser_result.new()
            begin
              result.success = @handler.getUser(args.authenticationToken)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            end
            write_result(result, oprot, 'getUser', seqid)
          end

          def process_getPublicUserInfo(seqid, iprot, oprot)
            args = read_args(iprot, GetPublicUserInfo_args)
            result = GetPublicUserInfo_result.new()
            begin
              result.success = @handler.getPublicUserInfo(args.username)
            rescue ::Evernote::EDAM::Error::EDAMNotFoundException => notFoundException
              result.notFoundException = notFoundException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            end
            write_result(result, oprot, 'getPublicUserInfo', seqid)
          end

          def process_getPremiumInfo(seqid, iprot, oprot)
            args = read_args(iprot, GetPremiumInfo_args)
            result = GetPremiumInfo_result.new()
            begin
              result.success = @handler.getPremiumInfo(args.authenticationToken)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            end
            write_result(result, oprot, 'getPremiumInfo', seqid)
          end

          def process_getSubscriptionInfo(seqid, iprot, oprot)
            args = read_args(iprot, GetSubscriptionInfo_args)
            result = GetSubscriptionInfo_result.new()
            begin
              result.success = @handler.getSubscriptionInfo(args.authenticationToken)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            end
            write_result(result, oprot, 'getSubscriptionInfo', seqid)
          end

          def process_getUserUrls(seqid, iprot, oprot)
            args = read_args(iprot, GetUserUrls_args)
            result = GetUserUrls_result.new()
            begin
              result.success = @handler.getUserUrls(args.authenticationToken)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            end
            write_result(result, oprot, 'getUserUrls', seqid)
          end

          def process_inviteToBusiness(seqid, iprot, oprot)
            args = read_args(iprot, InviteToBusiness_args)
            result = InviteToBusiness_result.new()
            begin
              @handler.inviteToBusiness(args.authenticationToken, args.emailAddress)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            end
            write_result(result, oprot, 'inviteToBusiness', seqid)
          end

          def process_removeFromBusiness(seqid, iprot, oprot)
            args = read_args(iprot, RemoveFromBusiness_args)
            result = RemoveFromBusiness_result.new()
            begin
              @handler.removeFromBusiness(args.authenticationToken, args.emailAddress)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            rescue ::Evernote::EDAM::Error::EDAMNotFoundException => notFoundException
              result.notFoundException = notFoundException
            end
            write_result(result, oprot, 'removeFromBusiness', seqid)
          end

          def process_updateBusinessUserIdentifier(seqid, iprot, oprot)
            args = read_args(iprot, UpdateBusinessUserIdentifier_args)
            result = UpdateBusinessUserIdentifier_result.new()
            begin
              @handler.updateBusinessUserIdentifier(args.authenticationToken, args.oldEmailAddress, args.newEmailAddress)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            rescue ::Evernote::EDAM::Error::EDAMNotFoundException => notFoundException
              result.notFoundException = notFoundException
            end
            write_result(result, oprot, 'updateBusinessUserIdentifier', seqid)
          end

          def process_listBusinessUsers(seqid, iprot, oprot)
            args = read_args(iprot, ListBusinessUsers_args)
            result = ListBusinessUsers_result.new()
            begin
              result.success = @handler.listBusinessUsers(args.authenticationToken)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            end
            write_result(result, oprot, 'listBusinessUsers', seqid)
          end

          def process_listBusinessInvitations(seqid, iprot, oprot)
            args = read_args(iprot, ListBusinessInvitations_args)
            result = ListBusinessInvitations_result.new()
            begin
              result.success = @handler.listBusinessInvitations(args.authenticationToken, args.includeRequestedInvitations)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            rescue ::Evernote::EDAM::Error::EDAMSystemException => systemException
              result.systemException = systemException
            end
            write_result(result, oprot, 'listBusinessInvitations', seqid)
          end

          def process_getAccountLimits(seqid, iprot, oprot)
            args = read_args(iprot, GetAccountLimits_args)
            result = GetAccountLimits_result.new()
            begin
              result.success = @handler.getAccountLimits(args.serviceLevel)
            rescue ::Evernote::EDAM::Error::EDAMUserException => userException
              result.userException = userException
            end
            write_result(result, oprot, 'getAccountLimits', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class CheckVersion_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CLIENTNAME = 1
          EDAMVERSIONMAJOR = 2
          EDAMVERSIONMINOR = 3

          FIELDS = {
            CLIENTNAME => {:type => ::Thrift::Types::STRING, :name => 'clientName'},
            EDAMVERSIONMAJOR => {:type => ::Thrift::Types::I16, :name => 'edamVersionMajor', :default => 1},
            EDAMVERSIONMINOR => {:type => ::Thrift::Types::I16, :name => 'edamVersionMinor', :default => 28}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class CheckVersion_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetBootstrapInfo_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LOCALE = 1

          FIELDS = {
            LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetBootstrapInfo_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Evernote::EDAM::UserStore::BootstrapInfo}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AuthenticateLongSession_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USERNAME = 1
          PASSWORD = 2
          CONSUMERKEY = 3
          CONSUMERSECRET = 4
          DEVICEIDENTIFIER = 5
          DEVICEDESCRIPTION = 6
          SUPPORTSTWOFACTOR = 7

          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'},
            CONSUMERKEY => {:type => ::Thrift::Types::STRING, :name => 'consumerKey'},
            CONSUMERSECRET => {:type => ::Thrift::Types::STRING, :name => 'consumerSecret'},
            DEVICEIDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'deviceIdentifier'},
            DEVICEDESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'deviceDescription'},
            SUPPORTSTWOFACTOR => {:type => ::Thrift::Types::BOOL, :name => 'supportsTwoFactor'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AuthenticateLongSession_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Evernote::EDAM::UserStore::AuthenticationResult},
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class CompleteTwoFactorAuthentication_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1
          ONETIMECODE = 2
          DEVICEIDENTIFIER = 3
          DEVICEDESCRIPTION = 4

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'},
            ONETIMECODE => {:type => ::Thrift::Types::STRING, :name => 'oneTimeCode'},
            DEVICEIDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'deviceIdentifier'},
            DEVICEDESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'deviceDescription'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class CompleteTwoFactorAuthentication_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Evernote::EDAM::UserStore::AuthenticationResult},
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RevokeLongSession_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RevokeLongSession_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2

          FIELDS = {
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AuthenticateToBusiness_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class AuthenticateToBusiness_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Evernote::EDAM::UserStore::AuthenticationResult},
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetUser_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetUser_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Evernote::EDAM::Type::User},
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetPublicUserInfo_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USERNAME = 1

          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetPublicUserInfo_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          NOTFOUNDEXCEPTION = 1
          SYSTEMEXCEPTION = 2
          USEREXCEPTION = 3

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Evernote::EDAM::UserStore::PublicUserInfo},
            NOTFOUNDEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'notFoundException', :class => ::Evernote::EDAM::Error::EDAMNotFoundException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException},
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetPremiumInfo_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetPremiumInfo_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Evernote::EDAM::Type::PremiumInfo},
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSubscriptionInfo_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSubscriptionInfo_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Evernote::EDAM::Type::SubscriptionInfo},
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetUserUrls_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetUserUrls_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Evernote::EDAM::UserStore::UserUrls},
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class InviteToBusiness_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1
          EMAILADDRESS = 2

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'},
            EMAILADDRESS => {:type => ::Thrift::Types::STRING, :name => 'emailAddress'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class InviteToBusiness_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2

          FIELDS = {
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RemoveFromBusiness_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1
          EMAILADDRESS = 2

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'},
            EMAILADDRESS => {:type => ::Thrift::Types::STRING, :name => 'emailAddress'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RemoveFromBusiness_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2
          NOTFOUNDEXCEPTION = 3

          FIELDS = {
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException},
            NOTFOUNDEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'notFoundException', :class => ::Evernote::EDAM::Error::EDAMNotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UpdateBusinessUserIdentifier_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1
          OLDEMAILADDRESS = 2
          NEWEMAILADDRESS = 3

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'},
            OLDEMAILADDRESS => {:type => ::Thrift::Types::STRING, :name => 'oldEmailAddress'},
            NEWEMAILADDRESS => {:type => ::Thrift::Types::STRING, :name => 'newEmailAddress'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UpdateBusinessUserIdentifier_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2
          NOTFOUNDEXCEPTION = 3

          FIELDS = {
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException},
            NOTFOUNDEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'notFoundException', :class => ::Evernote::EDAM::Error::EDAMNotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ListBusinessUsers_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ListBusinessUsers_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Evernote::EDAM::Type::UserProfile}},
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ListBusinessInvitations_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUTHENTICATIONTOKEN = 1
          INCLUDEREQUESTEDINVITATIONS = 2

          FIELDS = {
            AUTHENTICATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authenticationToken'},
            INCLUDEREQUESTEDINVITATIONS => {:type => ::Thrift::Types::BOOL, :name => 'includeRequestedInvitations'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ListBusinessInvitations_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          USEREXCEPTION = 1
          SYSTEMEXCEPTION = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Evernote::EDAM::Type::BusinessInvitation}},
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException},
            SYSTEMEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'systemException', :class => ::Evernote::EDAM::Error::EDAMSystemException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetAccountLimits_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SERVICELEVEL = 1

          FIELDS = {
            SERVICELEVEL => {:type => ::Thrift::Types::I32, :name => 'serviceLevel', :enum_class => ::Evernote::EDAM::Type::ServiceLevel}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @serviceLevel.nil? || ::Evernote::EDAM::Type::ServiceLevel::VALID_VALUES.include?(@serviceLevel)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field serviceLevel!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetAccountLimits_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          USEREXCEPTION = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Evernote::EDAM::Type::AccountLimits},
            USEREXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'userException', :class => ::Evernote::EDAM::Error::EDAMUserException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
